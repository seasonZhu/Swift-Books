{
    "title": "Implicitly unwrapped optionals",
    "postscript": "",
    "reviewType": "multipleSelection",
    "question": "Which of these are true about optionals?",
    "hint": "Both <code>String?<\/code> and <code>String!<\/code> might have a value or might not.",
    "syntaxHighlighting": false,
    "correct": [
        {
            "answer": "Optionals allow us to represent the absence of a value.",
            "reason": "They can store a regular value for their type or nil."
        },
        {
            "answer": "A <code>String?<\/code> must be unwrapped before use.",
            "reason": "This is correct."
        },
        {
            "answer": "A <code>String!<\/code> does not need to be unwrapped before use.",
            "reason": "If you access an implicitly unwrapped optional while it contains nil, your code will crash."
        },
        {
            "answer": "Swift uses <code>nil<\/code> to represent the absence of a value.",
            "reason": "This is correct."
        },
        {
            "answer": "You can use <code>if let<\/code> or <code>guard let<\/code> to unwrap optionals.",
            "reason": "This is correct."
        },
        {
            "answer": "If you try to use an implicitly unwrapped optional when it is <code>nil<\/code>, your code crashes.",
            "reason": "This is correct."
        }
    ],
    "wrong": [
        {
            "answer": "<code>String?<\/code> and <code>String!<\/code> behave the same.",
            "reason": "Although they are both optional, the former requires unwrapping before use whereas the latter does not."
        },
        {
            "answer": "<code>String?<\/code> can be <code>nil<\/code>, but <code>String!<\/code> can't.",
            "reason": "Both can be nil."
        },
        {
            "answer": "Arrays can't be optional",
            "reason": "Arrays can be optional."
        },
        {
            "answer": "You shouldn't pass optionals into functions",
            "reason": "You can do so if you wish; there's no reason not to."
        },
        {
            "answer": "You can't use both <code>String!<\/code> and <code>String?<\/code> in the same program.",
            "reason": "You can mix and match these all you need."
        },
        {
            "answer": "Once an optional has a value, you can't set it back to <code>nil<\/code>.",
            "reason": "You can set an optional back to nil whenever you want."
        }
    ]
}