{
    "title": "Copying objects",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code prints the same output twice \u2013 true or false?",
    "hint": "When you copy a struct, the original and the copy are different things with their own properties.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "class Hairdresser {\n\tvar clients = [String]()\n}\nvar tim = Hairdresser()\ntim.clients.append(\"Jess\")\nvar dave = tim\ndave.clients.append(\"Sam\")\nprint(tim.clients.count)\nprint(dave.clients.count)",
            "reason": "This prints the same output twice."
        },
        {
            "answer": "class Author {\n\tvar name = \"Anonymous\"\n}\nvar dickens = Author()\ndickens.name = \"Charles Dickens\"\nvar austen = dickens\nausten.name = \"Jane Austen\"\nprint(dickens.name)\nprint(austen.name)",
            "reason": "This prints the same output twice."
        },
        {
            "answer": "class Starship {\n\tvar maxWarp = 9.0\n}\nvar voyager = Starship()\nvoyager.maxWarp = 9.975\nvar enterprise = voyager\nenterprise.maxWarp = 9.6\nprint(voyager.maxWarp)\nprint(enterprise.maxWarp)",
            "reason": "This prints the same output twice."
        },
        {
            "answer": "class Magazine {\n\tvar pageCount = 132\n}\nvar example = Magazine()\nvar wired = example\nwired.pageCount = 164\nvar vogue = example\nvogue.pageCount = 128\nprint(wired.pageCount)\nprint(vogue.pageCount)",
            "reason": "This prints the same output twice."
        },
        {
            "answer": "class Hater {\n\tvar isHating = true\n}\nvar hater1 = Hater()\nvar hater2 = hater1\nhater1.isHating = false\nprint(hater1.isHating)\nprint(hater2.isHating)",
            "reason": "This prints the same output twice."
        },
        {
            "answer": "class Hospital {\n\tvar onCallStaff = [String]()\n}\nvar londonCentral = Hospital()\nvar londonWest = londonCentral\nlondonCentral.onCallStaff.append(\"Dr Harlan\")\nlondonWest.onCallStaff.append(\"Dr Haskins\")\nprint(londonCentral.onCallStaff.count)\nprint(londonWest.onCallStaff.count)",
            "reason": "This prints the same output twice."
        }
    ],
    "wrong": [
        {
            "answer": "class Statue {\n\tvar sculptor = \"Unknown\"\n}\nvar venusDeMilo = Statue()\nvenusDeMilo.sculptor = \"Alexandros of Antioch\"\nvar david = Statue()\ndavid.sculptor = \"Michaelangelo\"\nprint(venusDeMilo.sculptor)\nprint(david.sculptor)",
            "reason": "This creates two different statues, so it prints two different sculptors."
        },
        {
            "answer": "class Ewok {\n\tvar fluffinessPercentage = 100\n}\nvar chirpa = Ewok()\nvar wicket = Ewok()\nchirpa.fluffinessPercentage = 90\nprint(wicket.fluffinessPercentage)\nprint(chirpa.fluffinessPercentage)",
            "reason": "This creates two different ewoks, so it prints two different fluffiness percentages."
        },
        {
            "answer": "struct GalacticaCrew {\n\tvar isCylon = false\n}\nvar starbuck = GalacticaCrew()\nvar tyrol = starbuck\ntyrol.isCylon = true\nprint(starbuck.isCylon)\nprint(tyrol.isCylon)",
            "reason": "When you copy a struct, the original and the copy are different things with their own properties."
        },
        {
            "answer": "class Queen {\n\tvar isMotherOfDragons = false\n}\nvar elizabeth = Queen()\nvar daenerys = Queen()\ndaenerys.isMotherOfDragons = true\nprint(elizabeth.isMotherOfDragons)\nprint(daenerys.isMotherOfDragons)",
            "reason": "This creates two different queens, so it prints two different properties."
        },
        {
            "answer": "struct Calculator {\n\tvar currentTotal = 0\n}\nvar baseModel = Calculator()\nvar casio = baseModel\nvar texas = baseModel\ncasio.currentTotal = 556\ntexas.currentTotal = 384\nprint(casio.currentTotal)\nprint(texas.currentTotal)",
            "reason": "When you copy a struct, the original and the copy are different things with their own properties."
        },
        {
            "answer": "class BasketballPlayer {\n\tvar height = 200.0\n}\nvar lebron = BasketballPlayer()\nlebron.height = 203.0\nvar curry = BasketballPlayer()\ncurry.height = 190\nprint(lebron.height)\nprint(curry.height)",
            "reason": "This creates two different basketball players, so it prints two different heights."
        }
    ]
}