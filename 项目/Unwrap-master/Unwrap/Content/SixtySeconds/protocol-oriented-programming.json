{
    "title": "Protocol-oriented programming",
    "postscript": "Protocol extensions are default implementations of methods, but your types can still provide their own versions.",
    "reviewType": "multipleSelection",
    "question": "Which of these are true about protocols?",
    "hint": "Protocols never provide implementations; that's done by extensions.",
    "syntaxHighlighting": false,
    "correct": [
        {
            "answer": "Protocols specify what methods and properties conforming types must have.",
            "reason": "This is correct."
        },
        {
            "answer": "You can create one protocol by inheriting from others.",
            "reason": "You can even inherit from multiple protocols if you want to."
        },
        {
            "answer": "You can write extensions for protocols to provide default implementations.",
            "reason": "This lets us share code more easily."
        },
        {
            "answer": "Protocols can mark properties as read-only or read-write.",
            "reason": "This is correct."
        },
        {
            "answer": "Each type can conform to as many protocols as you want.",
            "reason": "This is correct."
        },
        {
            "answer": "You can write extensions for Swift's built-in protocols.",
            "reason": "This lets us add functionality very quickly."
        }
    ],
    "wrong": [
        {
            "answer": "Protocols can contain method implementations.",
            "reason": "Only extensions can contain method implementations."
        },
        {
            "answer": "Properties must always be read-write.",
            "reason": "They can also be read-only."
        },
        {
            "answer": "Protocols can define their own protocols internally.",
            "reason": "Protocols cannot contain other protocols."
        },
        {
            "answer": "Only structs can conform to protocols.",
            "reason": "Any type can conform to protocols."
        },
        {
            "answer": "Each data type can conform to only one protocol.",
            "reason": "You can conform to as many as you need."
        },
        {
            "answer": "You can write extensions for protocols that don't exist.",
            "reason": "This is not possible in Swift."
        }
    ]
}