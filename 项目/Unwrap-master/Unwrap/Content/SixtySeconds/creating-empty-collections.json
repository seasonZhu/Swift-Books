{
    "title": "Creating empty collections",
    "postscript": "",
    "reviewType": "multipleSelection",
    "question": "Which of these are valid in Swift?",
    "hint": "Arrays and dictionaries can be made in two different ways, for example <code>[Int]<\/code> or <code>Array<Int><\/code> both create arrays.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "var authorAges = [String: Int]()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var temperatures = [Double]()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var states = Set<String>()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var favoriteColors = Dictionary<String, String>()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var scores = Array<Int>()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var answers = [Bool]()",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "var friends = Set[String]()",
            "reason": "The correct syntax is Set<String>()."
        },
        {
            "answer": "var mountainHeights = [String, Int]()",
            "reason": "The correct syntax is <code>[String: Int]<\/code>."
        },
        {
            "answer": "var episodeNames = Array()",
            "reason": "You must tell Swift what kind of data the array will hold."
        },
        {
            "answer": "var measurements = [Double]",
            "reason": "When creating a new empty array you must place empty parentheses after the type, e.g. <code>[Double]()<\/code>."
        },
        {
            "answer": "var wines = Dictionary<String: String>()",
            "reason": "The correct syntax is either <code>Dictionary<String, String>()<\/code> or <code>[String: String]()<\/code>."
        },
        {
            "answer": "var badges = Set<>()",
            "reason": "You must tell Swift what kind of data the set will hold."
        }
    ]
}