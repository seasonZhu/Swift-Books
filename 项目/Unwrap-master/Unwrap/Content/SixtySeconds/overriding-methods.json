{
    "title": "Overriding methods",
    "postscript": "It\u2019s an error to override a method that doesn\u2019t exist in the parent class.",
    "reviewType": "singleSelection",
    "question": "This code will print some sort of output \u2013 true or false?",
    "hint": "Subclasses must use <code>override<\/code> to change methods from their parents.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "class Cat {\n\tfunc meow() {\n\t\tprint(\"Meow!\")\n\t}\n}\nlet toby = Cat()\ntoby.meow()",
            "reason": "This code will print \"Meow!\""
        },
        {
            "answer": "class Appliance {\n\tfunc start() {\n\t\tprint(\"Starting...\")\n\t}\n}\nclass Oven: Appliance {\n}\nlet oven = Oven()\noven.start()",
            "reason": "This code will print \"Starting...\""
        },
        {
            "answer": "class Spaceship {\n}\nclass StarDestroyer: Spaceship {\n\tfunc enterLightSpeed() {\n\t\tprint(\"Let's go to ludicrous speed!\")\n\t}\n}\nlet executor = StarDestroyer()\nexecutor.enterLightSpeed()",
            "reason": "This code will print \"Let's go to ludicrous speed!\""
        },
        {
            "answer": "class Band {\n\tfunc singSong() {\n\t\tprint(\"Here's a new song.\")\n\t}\n}\nclass MetalBand: Band {\n\toverride func singSong() {\n\t\tprint(\"Ruuuuh ruh ruh ruuuuuh!\")\n\t}\n}\nlet lordi = MetalBand()\nlordi.singSong()",
            "reason": "This code will print \"Ruuuuh ruh ruh ruuuuuh!\""
        },
        {
            "answer": "class Watch {\n\tfunc tellTime() {\n\t\tprint(\"It's 9:41\")\n\t}\n}\nclass SmartWatch: Watch {\n\toverride func tellTime() {\n\t\tprint(\"It's 9:41\")\n\t}\n}\nlet appleWatch = SmartWatch()\nappleWatch.tellTime()",
            "reason": "This code will print \"It's 9:41\""
        },
        {
            "answer": "class Composer {\n\tfunc composeMusic() {\n\t\tprint(\"Here's some music I wrote.\")\n\t}\n}\nclass OperaComposer: Composer {\n\toverride func composeMusic() {\n\t\tprint(\"Here's an opera I wrote.\")\n\t}\n}\nlet verdi = OperaComposer()\nverdi.composeMusic()",
            "reason": "This code will print \"Here's an opera I wrote.\""
        }
    ],
    "wrong": [
        {
            "answer": "class Doctor {\n\tfunc operate() {\n\t\tprint(\"I can't do that.\")\n\t}\n}\nclass Surgeon {\n\toverride func operate() {\n\t\tprint(\"OK, let's go!\")\n\t}\n}\nlet doogieHowser = Doctor()\ndoogieHowser.operate()",
            "reason": "The <code>Surgeon<\/code> class cannot use <code>override<\/code> because it doesn't inherit from anything."
        },
        {
            "answer": "class Building {\n\toverride func build() {\n\t\tprint(\"This will take a couple of months.\")\n\t}\n}\nclass Skyscraper: Building {\n\toverride func build() {\n\t\tprint(\"This will take a year.\")\n\t}\n}\nlet shanghaiTower = Skyscraper()\nshanghaiTower.build()",
            "reason": "The <code>Building<\/code> class cannot use <code>override<\/code> because it doesn't inherit from anything."
        },
        {
            "answer": "class Airplane: Jet {\n\tfunc takeOff() {\n\t\tprint(\"Fasten your seatbelts.\")\n\t}\n}\nclass Jet: Airplane {\n\toverride func takeOff() {\n\t\tprint(\"Someone call Kenny Loggins, because we're going into the danger zone!\")\n\t}\n}\nlet f14 = Jet()\nf14.takeOff()",
            "reason": "This attempts to make one class inherit from another, and the other class inherit from the first, which is not valid Swift."
        },
        {
            "answer": "class Cinema {\n\tfunc showMovie() {\n\t\tprint(\"Get your popcorn ready!\")\n\t}\n}\nclass IMAXCinema: Cinema {\n\tfunc showMovie() {\n\t\tprint(\"Get your eardrums ready!\")\n\t}\n}\nlet londonIMAX = IMAXCinema()\nlondonIMAX.showMovie()",
            "reason": "The <code>showMovie()<\/code> method of <code>IMAXCinema<\/code> must be declared using <code>override<\/code>."
        },
        {
            "answer": "class Store {\n\tfunc restock() -> String {\n\t\treturn \"Fill up the empty shelves\"\n\t}\n}\nclass GroceryStore: Store {\n\toverride func restock() -> String {\n\t\treturn \"We need to buy more food.\"\n\t}\n}\nlet tesco = GroceryStore()\ntesco.restock()",
            "reason": "Although this code is valid, it not print any output."
        },
        {
            "answer": "class Exercise {\n\tfunc describe() {\n\t}\n}\nclass ChinUps: Exercise {\n\toverride func describe() {\n\t}\n}\nlet firstRep = ChinUps()\nfirstRep.describe()",
            "reason": "Although this code is valid, it not print any output."
        }
    ]
}